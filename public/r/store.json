{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "store",
  "type": "registry:block",
  "title": "Store Starter",
  "description": "A store application with your brand themed components",
  "files": [
    {
      "path": "src/app/globals.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Base colors */\n  --background: #f5f5f5;\n  --foreground: #2c2c2c;\n  --card: #ffffff;\n  --card-foreground: #2c2c2c;\n  --popover: #ffffff;\n  --popover-foreground: #2c2c2c;\n  \n  /* Primary colors - QuickBooks blue */\n  --primary: #2CA01C;\n  --primary-foreground: #ffffff;\n  --secondary: #f0f0f0;\n  --secondary-foreground: #2c2c2c;\n  \n  /* UI elements */\n  --muted: #f5f5f5;\n  --muted-foreground: #666666;\n  --accent: #2CA01C;\n  --accent-foreground: #ffffff;\n  \n  /* State colors */\n  --destructive: #dc2626;\n  --destructive-foreground: #ffffff;\n  \n  /* Border and input */\n  --border: #e5e5e5;\n  --input: #e5e5e5;\n  --ring: #2CA01C;\n  \n  /* Chart colors */\n  --chart-1: #2CA01C;\n  --chart-2: #4CAF50;\n  --chart-3: #81C784;\n  --chart-4: #A5D6A7;\n  --chart-5: #C8E6C9;\n  \n  /* Sidebar */\n  --sidebar: #2c2c2c;\n  --sidebar-foreground: #ffffff;\n  --sidebar-primary: #2CA01C;\n  --sidebar-primary-foreground: #ffffff;\n  --sidebar-accent: #2CA01C;\n  --sidebar-accent-foreground: #ffffff;\n  --sidebar-border: #404040;\n  --sidebar-ring: #2CA01C;\n  \n  /* Typography */\n  --font-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  \n  /* Border radius */\n  --radius: 0.375rem;\n  \n  /* Shadows */\n  --shadow-2xs: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);\n}\n\n/* Dark mode variables */\n[data-theme=\"dark\"] {\n  --background: #282828;\n  --foreground: #eceef1;\n  --card: #363639;\n  --card-foreground: #eceef1;\n  --popover: #363639;\n  --popover-foreground: #eceef1;\n  \n  --primary: #53b700;\n  --primary-foreground: #282828;\n  --secondary: #393a3d;\n  --secondary-foreground: #eceef1;\n  \n  --muted: #393a3d;\n  --muted-foreground: #babec5;\n  --accent: #53b700;\n  --accent-foreground: #282828;\n  \n  --destructive: #ff8979;\n  --destructive-foreground: #282828;\n  \n  --border: #6b6c72;\n  --input: #6b6c72;\n  --ring: #53b700;\n  \n  --chart-1: #34bfff;\n  --chart-2: #008481;\n  --chart-3: #9457fa;\n  --chart-4: #ff9331;\n  --chart-5: #f25a52;\n  \n  --sidebar: #282828;\n  --sidebar-foreground: #eceef1;\n  --sidebar-primary: #53b700;\n  --sidebar-primary-foreground: #282828;\n  --sidebar-accent: #53b700;\n  --sidebar-accent-foreground: #282828;\n  --sidebar-border: #6b6c72;\n  --sidebar-ring: #53b700;\n}\n\n@layer base {\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
      "type": "registry:file",
      "target": "app/globals.css"
    },
    {
      "path": "src/app/starter/tailwind.config.ts",
      "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: \"class\",\n  theme: {\n    extend: {\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        chart: {\n          1: \"var(--chart-1)\",\n          2: \"var(--chart-2)\",\n          3: \"var(--chart-3)\",\n          4: \"var(--chart-4)\",\n          5: \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: {\n            DEFAULT: \"var(--sidebar-primary)\",\n            foreground: \"var(--sidebar-primary-foreground)\",\n          },\n          accent: {\n            DEFAULT: \"var(--sidebar-accent)\",\n            foreground: \"var(--sidebar-accent-foreground)\",\n          },\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      borderRadius: {\n        sm: \"calc(var(--radius) - 4px)\",\n        md: \"calc(var(--radius) - 2px)\",\n        lg: \"var(--radius)\",\n        xl: \"calc(var(--radius) + 4px)\",\n      },\n      boxShadow: {\n        \"2xs\": \"var(--shadow-2xs)\",\n        xs: \"var(--shadow-xs)\",\n        sm: \"var(--shadow-sm)\",\n        DEFAULT: \"var(--shadow)\",\n        md: \"var(--shadow-md)\",\n        lg: \"var(--shadow-lg)\",\n        xl: \"var(--shadow-xl)\",\n        \"2xl\": \"var(--shadow-2xl)\",\n      },\n    },\n  },\n  plugins: [],\n};\n",
      "type": "registry:file",
      "target": "tailwind.config.ts"
    },
    {
      "path": "src/app/starter/store/root-layout.tsx",
      "content": "import { VercelToolbar } from \"@vercel/toolbar/next\";\nimport { Geist } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/globals.css\";\n\nconst geist = Geist({ subsets: [\"latin\"] });\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className={cn(geist.className, \"bg-background\")}>\n      <body>\n        <main className=\"mt-16 flex w-full justify-center\">\n          <div className=\"container\">{children}</div>\n        </main>\n\n        {process.env.NODE_ENV === \"development\" && <VercelToolbar />}\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/app/starter/store/page.tsx",
      "content": "import ProductGrid from \"@/components/product-grid\";\nimport { getCategories, getProducts } from \"@/lib/products\";\n\nexport default async function Store() {\n  const products = await getProducts();\n  const categories = await getCategories();\n\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <main className=\"flex-1\">\n        <section className=\"py-12\">\n          <div className=\"container px-4 md:px-6\">\n            <div className=\"flex flex-col items-center justify-center space-y-4 text-center\">\n              <div className=\"space-y-2\">\n                <h1 className=\"font-bold text-3xl tracking-tighter sm:text-4xl md:text-5xl\">\n                  Welcome to Store\n                </h1>\n\n                <p className=\"mx-auto max-w-[700px] text-gray-500 md:text-xl\">\n                  Shop our unique collection of products. Free shipping on all\n                  orders!\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-8 md:py-12\">\n          <div className=\"container px-4 md:px-6\">\n            <ProductGrid products={products} categories={categories} />\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "src/components/product-grid.tsx",
      "content": "\"use client\";\n\nimport { ShoppingCart } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport type { Product } from \"@/lib/products\";\n\nexport default function ProductGrid({\n  categories,\n  products,\n}: { categories: string[]; products: Product[] }) {\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  const filteredProducts = selectedCategory\n    ? products.filter((product) => product.category === selectedCategory)\n    : products;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap gap-2\">\n        <Button\n          variant={selectedCategory === null ? \"default\" : \"outline\"}\n          onClick={() => setSelectedCategory(null)}\n          className=\"rounded-full\"\n        >\n          All\n        </Button>\n\n        {categories.map((category) => (\n          <Button\n            key={category}\n            variant={selectedCategory === category ? \"default\" : \"outline\"}\n            onClick={() => setSelectedCategory(category)}\n            className=\"rounded-full\"\n          >\n            {category}\n          </Button>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n        {filteredProducts.map((product) => (\n          <Card key={product.id} className=\"overflow-hidden p-0\">\n            <Link href={`/products/${product.id}`}>\n              <div className=\"flex aspect-square items-center justify-center bg-white p-6\" />\n            </Link>\n\n            <CardContent className=\"p-4\">\n              <Link href={`/products/${product.id}`}>\n                <h3 className=\"font-semibold\">{product.name}</h3>\n                <p className=\"line-clamp-2 text-gray-500 text-sm\">\n                  {product.description}\n                </p>\n              </Link>\n            </CardContent>\n\n            <CardFooter className=\"flex items-center justify-between p-4 pt-0\">\n              <div className=\"font-semibold\">${product.price.toFixed(2)}</div>\n              <Button size=\"sm\">\n                <ShoppingCart className=\"mr-2 size-4\" /> Add\n              </Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/lib/products.ts",
      "content": "import { z } from \"zod\";\n\nconst ProductSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  price: z.number(),\n  description: z.string(),\n  category: z.string(),\n  brand: z.string(),\n  stock: z.number(),\n});\n\nexport type Product = z.infer<typeof ProductSchema>;\n\nexport async function getProducts(): Promise<Product[]> {\n  try {\n    const response = await fetch(\"https://api.vercel.app/products\");\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch products\");\n    }\n\n    const data = await response.json();\n\n    return z.array(ProductSchema).parse(data);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      console.error(\"Validation error:\", error.issues);\n    } else {\n      console.error(\"Error fetching products:\", error);\n    }\n    throw error;\n  }\n}\n\nexport async function getCategories(): Promise<string[]> {\n  try {\n    const products = await getProducts();\n    return Array.from(new Set(products.map((product) => product.category)));\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error);\n    throw error;\n  }\n}\n",
      "type": "registry:lib"
    }
  ]
}